Golang笔记03
1.并发与并行


2.golang中的goroutine以及主线程

Golang中的多协程类似于多线程
多协程与多线程的主要区别:开启一个线程占用内存为2MB，开启一个协程占用内存是2KB
3.如何创建并启动gorountine
//go test()启动一个test协程,test协程与main主线程并行执行
func test() {
    for i := 0; i < 10; i++ {
        fmt.Println("test()", i)
        time.Sleep(time.Millisecond * 50)
    }
}

func main() {
    go test()
    for i := 0; i < 10; i++ {
        fmt.Println("main()", i)
        time.Sleep(time.Millisecond * 50)
    }
}
4.以上程序的bug
 主进程执行速度快于协程，主线程执行完毕后，即使协程没有执行完毕，程序也会退出
5.如何解决以上bug
//go test()启动一个test协程,test协程与main主线程并行执行
//解决主线程运行完毕后不等待协程结束的Bug
//sync.WaitGroup
var wg sync.WaitGroup

func test1() {
    for i := 0; i < 10; i++ {
        fmt.Println("test1()", i)
        time.Sleep(time.Millisecond * 50)
    }
    wg.Done() //协程数-1
}
func test2() {
    for i := 0; i < 10; i++ {
        fmt.Println("test2()", i)
        time.Sleep(time.Millisecond * 50)
    }
    wg.Done() //协程数-1
}
func main() {
    wg.Add(1) //协程数+1
    go test1()
    wg.Add(1)
    go test2()
    for i := 0; i < 10; i++ {
        fmt.Println("main()", i)
        time.Sleep(time.Millisecond * 10)
    }
    wg.Wait()//等待协程执行完毕
}
6.for循环实现多个协程
//for 循环开启多个协程
var wg sync.WaitGroup

func test(i int) {
    for j := 0; j < 5; j++ {
        fmt.Printf("这是第%v协程打印的第%v条数据\n", i, j)
    }
    wg.Done()
}
func main() {
    for i := 1; i <= 5; i++ {
        wg.Add(1)
        go test(i)
    }
    wg.Wait()
}
7.应用: 
6协程 处理12w个数中素数
//6协程 120000数据
//1 1-20000
//2 20001-40000
//3 40001-60000
//4 60001-80000
//5 80001-100000
//6 1000001-120000
var wg sync.WaitGroup

func test(count, num int) {
    for i := num - 20000 + 1; i <= num; i++ {
        var flag = true
        for j := 2; j < i; j++ {
            if i%j == 0 {
                flag = false
                break
            }
        }
        if flag == true {
            //fmt.Println(i)
        }
    }
    wg.Done()
}
func main() {
    var start = time.Now().Unix()
    var num = 20000
    for i := 0; i < 6; i++ {
        wg.Add(1)
        go test(i, num)
        num += 20000
    }
    wg.Wait()
    var stop = time.Now().Unix()
    fmt.Println(stop - start)//2s
}
单主线程处理
func main() {
    var start = time.Now().Unix()
    for i := 1; i <= 120000; i++ {
        var flag = true
        for j := 2; j < i; j++ {
            if i%j == 0 {
                flag = false
                break
            }
        }
        if flag == true {
            //fmt.Println(i)
        }
    }
    var stop = time.Now().Unix()
    var offset = stop - start
    fmt.Println(offset)//7s
}



8.管道channel

func main() {
    //定义管道 引用类型 先进先出
    var ch = make(chan int, 2)
    ch <- 10
    var ch2 = ch
    ch2 <- 20
    <-ch
    fmt.Println(<-ch)

    //管道阻塞 (放不下数据或者 没有数据了还在取)
    ch <- 20
    ch <- 21
    ch <- 22//fatal error: all goroutines are asleep - deadlock!
}
9.遍历管道
for
func main() {
    //使用for与for range遍历管道的不同
    var ch1 = make(chan int, 10) //cap
    for i := 0; i < 10; i++ {
        ch1 <- i
    }
    //for 循环不用关闭管道
    for j := 0; j < 10; j++ {
        fmt.Println(<-ch1)
    }
}
for range
func main() {
    //使用for与for range遍历管道的不同
    var ch1 = make(chan int, 10) //cap
    for i := 0; i < 10; i++ {
        ch1 <- i
    }
    close(ch1)           //使用for range遍历需要关闭管道
    for v := range ch1 { //管道没有key
        fmt.Println(v)
    }
}

10.管道与协程的应用
var wg sync.WaitGroup

func main() {
    //定义两个方法，一个给管道写数据，一个从管道读数据，同步进行
    var ch1 = make(chan int, 100)
    wg.Add(1)
    go write(ch1, 100)
    wg.Add(1)
    go read(ch1)
    wg.Wait()
}
func write(ch chan int, count int) {
    for i := 0; i < count; i++ {
        ch <- i
        time.Sleep(time.Millisecond * 20)
        fmt.Printf("写入数据:%v\n", i)
    }
    close(ch)
    wg.Done()
}
func read(ch chan int) {
    for v := range ch {
        fmt.Printf("取出数据:%v\n", v)
        time.Sleep(time.Millisecond * 10)
    }
    wg.Done()
}
11.多协程与channel运用:同步输入num，判断prime num,输出prime num
(开启多个协程时,channel何时关闭)
package main

import (
    "fmt"
    "sync"
)
var wg sync.WaitGroup
//一个协程放入数据，一个协程放入是素数的数据，一个协程输出素数，一组协程判断素数
//只在向管道输入信息完成后需要关闭管道，再写入数据就会报错，读数据不需要关闭管道
func putnum(ch1 chan int, num int) {
    for i := 2; i < num; i++ {
        ch1 <- i
    }
    close(ch1)
    wg.Done()
}
//判断是否为素数 是素数放入另一个管道中
func primenum(ch1 chan int, ch2 chan int, ch3 chan bool) {
    for v := range ch1 {
        var flag = true
        for i := 2; i < v; i++ {
            if v%i == 0 {
                flag = false
                break
            }
        }
        if flag == true {
            ch2 <- v
        }
    }
    ch3 <- true
    wg.Done()
}
//一个协程输出素数
func writePrime(ch2 chan int) {
    for v := range ch2 {
        fmt.Printf("%v是素数\n", v)
    }
    wg.Done()
}
func main() {
    var ch1 = make(chan int, 1000)
    var ch2 = make(chan int, 1000)
    var ch3 = make(chan bool, 10)
    wg.Add(1)
    go putnum(ch1, 500)
    for i := 0; i < 10; i++ {
        wg.Add(1)
        go primenum(ch1, ch2, ch3)
    }
    wg.Add(1)
    go func() {
        for i := 0; i < 10; i++ {
            <-ch3//ch3中没有数据时，会卡在这里等待
        }
        close(ch2)
        wg.Done()
    }()
    wg.Add(1)
    go writePrime(ch2)
    wg.Wait()
}
12.单向管道
func main() {
    //定义只写管道
    var ch1 = make(chan<- int, 2)
    ch1 <- 1
    //定义只读管道
    var ch2 = make(<-chan int, 2)
    <-ch2
    //双向管道
    var ch3 = make(chan int, 2)
    ch3 <- 2
    fmt.Println(<-ch3)

}
13.select 多路复用（获取多个管道中的数据）
使用select时 不用关闭channle
func main() {
    //在某些情况下，想同时获取多个通道中的数据
    var ch1 = make(chan int, 5)
    for i := 0; i < 5; i++ {
        ch1 <- i
    }
    var ch2 = make(chan string, 5)
    for i := 0; i < 5; i++ {
        ch2 <- fmt.Sprintf("读入数据_%v", i)
    }

    for {
        //执行顺序 一次循环执行一次case 全部执行完毕后
        //执行default 没有break不会跳出for循环
        select {
        case v := <-ch1:
            fmt.Printf("得到数据:%v\n", v)
        case v := <-ch2:
            fmt.Printf("得到数据:%v\n", v)
        default:
            fmt.Println("读取完毕")
            return //一定要退出死循环
        }
    }
}
14.Swith case 内部执行顺序
(golang中即使不写break，程序默认添加break)




15.解决协程间出现的panic
func test() { //一个错误程序
    defer func() {
        error := recover()
        if error != nil {
            fmt.Println("test()出现错误")
        }
    }()
    var falsemap map[int]int
    falsemap[1] = 1
}
func printInfo() {
    for i := 0; i < 10; i++ {
        fmt.Printf("hello golang_%v\n", i)
    }
}

//一个协程出错导致另一个正常的协程也无法执行
func main() {
    go test()
    go printInfo()
    time.Sleep(time.Second)
}
16.golang 中的并发安全和锁(1)
var count = 0
var wg sync.WaitGroup

//go bulid main.go  编译main.go 生成main.exe
//go build -race main.go 编译后运行查看 数据竞争关系
//再输入 main.exe 可以查看有几个竞争关系
//使用互斥锁 sync.Mutex
var mutex sync.Mutex
func test() {
    mutex.Lock()
    count++
    fmt.Printf("得到的数据:%v\n", count)
    mutex.Unlock()
    wg.Done()
}
func main() {
    for i := 0; i < 20; i++ {
        wg.Add(1)
        go test()
    }
    wg.Wait()
}
17.golang 中的并发安全和锁(2)
//多协程操作map slice时 也要上互斥锁
var count = 0
var wg sync.WaitGroup
var mutex sync.Mutex
var m = make(map[int]int, 0)

func test(num int) {
    var sum = 1
    mutex.Lock()
    for i := 1; i <= num; i++ {
        sum *= i
    }
    m[num] = sum
    fmt.Printf("k:%v,value:%v\n", num, sum)
    mutex.Unlock()
    wg.Done()
}
func main() {
    for i := 1; i <= 30; i++ {
        wg.Add(1)
        go test(i)
    }
    wg.Wait()
}
18.golang读写锁

实质上Rlock()与Runlock()中间的操作可以并行执行，lock,unlock中间的操作只能互斥串行执行
var wg sync.WaitGroup
var mutex sync.RWMutex

//写操作是完全互斥，不能读也不能写，
//读操作时可以同时读 不能写
func write() {
    mutex.Lock()
    fmt.Println("写数据")
    time.Sleep(time.Second * 2)
    mutex.Unlock()
    wg.Done()
}
func read() {
    mutex.RLock()
    fmt.Println("--读数据")
    mutex.RUnlock()
    wg.Done()
}
func main() {
    for i := 1; i <= 20; i++ {
        wg.Add(1)
        go write()
    }
    for i := 1; i <= 20; i++ {
        wg.Add(1)
        go read()
    }
    wg.Wait()
}
18.反射

1.获取空接口保存类型
2.获取结构体自定义的tag标签，json 的key



19.使用reflect.Type()获取任意值的类型

//Kind()底层类型 Name()类型名称
func fntype(x interface{}) {
    v := reflect.TypeOf(x)
    fmt.Printf("类型:%v,类型名称：%v,类型种类:%v\n", v, v.Name(), v.Kind())
}
func main() {
    var a = 10
    type myInt int
    var b myInt = 15
    type User struct {
        Name string
    }
    var u = User{
        Name: "wangchenglong",
    }
    var h = 25
`类型:int,类型名称：int,类型种类:int
类型:main.myInt,类型名称：myInt,类型种类:int
类型:main.User,类型名称：User,类型种类:struct
类型:*int,类型名称：,类型种类:ptr`
    fntype(a)
    fntype(b)
    fntype(u)
    fntype(&h)
}

20.refelct.valueof()

func printInfo(x interface{}) {
    //refelct.Valueof()返回的是valueof类型
    num := reflect.ValueOf(x)
    //通过Num.int()获取int类型的原始值
    kind := num.Kind()
    switch kind {
    case reflect.Int:
        //通过Num.int()获取int类型的原始值
        fmt.Printf("int类型的原始值：%v\n", num.Int()+10)
    case reflect.Float32:
        //通过Num.Float()获取float类型的原始值
        fmt.Printf("float类型的原始值：%v\n", num.Float()+10)
    case reflect.String:
        //通过Num.string()获取string类型的原始值
        fmt.Printf("string类型的原始值：%v\n", num.String()+"拼接字符串")
    default:
        fmt.Println("没有该类型")
    }
}
func main() {
    var a = 10
    var b float32 = 3.14
    var c = "这是一个字符串"
    printInfo(a)
    printInfo(b)
    printInfo(c)
}

21.通过反射修改变量值
//修改a的值 必须传入指针
func change(x interface{}) {
    num := reflect.ValueOf(x)
    kind := num.Elem().Kind()
    switch kind {
    case reflect.Int:
        num.Elem().SetInt(123)
    }
}
func main() {
    var a = 10
    change(&a)
    fmt.Println(a)
}

修改string
func change(x interface{}) {
    value := reflect.ValueOf(x)
    kind := value.Elem().Kind()
    switch kind {
    case reflect.String:
        value.Elem().SetString("你好java")
    }
}
func main() {
    var str = "你好golang"
    change(&str)
    fmt.Println(str)
}



22.结构体的反射

type Student struct {
    Name  string `json:"name"`
    Age   int    `json:"age"`
    Class string `json:"class"`
}

func ifstruct(x interface{}) {
    v := reflect.TypeOf(x)
    t := reflect.ValueOf(x)
    if v.Kind() != reflect.Struct && v.Elem().Kind() != reflect.Struct {
        return
    }
    //1.通过类型变量的Filed获取结构体字段
    field0 := v.Field(0) //{Name  string json:"name" 0 [0] false}
    // 字段名称:Name
    // 字段类型:string
    // 字段类型:name
    fmt.Printf("字段名称:%v\n", field0.Name)
    fmt.Printf("字段类型:%v\n", field0.Type)
    fmt.Printf("字段类型:%v\n", field0.Tag.Get("json"))
    fmt.Println("--------------------------------------")
    //2.通过类型变量的FiledByName获取结构体字段
    field1, _ := v.FieldByName("Age") //{Age  int json:"age" 0 [0] false}
    fmt.Printf("字段名称:%v\n", field1.Name) 
    fmt.Printf("字段类型:%v\n", field1.Type)
    fmt.Printf("字段类型:%v\n", field1.Tag.Get("json"))
    //3.通过类型变量的NumField获取结构体有几个字段
    field2 := v.NumField()
    fmt.Printf("字段个数有:%v\n", field2)
    //4.通过值变量获取结构体属性对应的值
    name := t.FieldByName("Name")
    age := t.FieldByName("Age")
    class := t.FieldByName("Class")
    fmt.Printf("Name:%v\nAge:%v\nClass:%v\n", name, age, class)
    //  Name:wangchenglong
    // Age:18
    // Class:一年级
}

//通过反射获取结构体字段
func main() {
    var stu = Student{
        Name:  "wangchenglong",
        Age:   18,
        Class: "一年级",
    }
    ifstruct(stu)
}
23.通过反射循环打印结构体所有的类型与值
func ifstruct(x interface{}) {
    t := reflect.TypeOf(x)
    v := reflect.ValueOf(x)
    if t.Kind() != reflect.Struct && t.Elem().Kind() != reflect.Struct {
        fmt.Println("不是结构体类型")
        return
    }
    //打印结构体所有属性类型与value
    for i := 0; i < t.NumField(); i++ {
        fmt.Printf("字段名:%v\n字段类型:%v\nTAG:%v\n字段值:%v\n", t.Field(i).Name, t.Field(i).Type, t.Field(i).Tag.Get("json"), v.Field(i))
    }
}
24.通过反射获取和执行结构体方法
type Student struct {
    Name  string `json:"name"`
    Age   int    `json:"age"`
    Class string `json:"class"`
}

func (s *Student) SetInfo(name string, age int, class string) {
    s.Name = name
    s.Age = age
    s.Class = class
}
func (s Student) GetInfo() string {
    var str = fmt.Sprintf("Name:%v,Age:%v,Class:%v", s.Name, s.Age, s.Class)
    return str
}
func (s Student) Test() {
    fmt.Printf("结构体 test()\n")
}
func printInfo(x interface{}) {
    k := reflect.ValueOf(x)
    t := reflect.TypeOf(x)
    if t.Kind() != reflect.Struct && t.Elem().Kind() != reflect.Struct {
        return
    }
    //1.通过类型变量里面的Method可以获取结构体的方法
    //  GetInfo
    // func(main.Student) string
    method0 := t.Method(0) //传入的0与方法顺序无关 与方法ASCII顺序有关
    fmt.Println(method0.Name)
    fmt.Println(method0.Type)
    method1, _ := t.MethodByName("GetInfo")
    fmt.Println(method1.Name)
    fmt.Println(method1.Type)
    //2.通过类型变量获取这个结构体有多少个方法
    i := t.NumMethod()
    fmt.Printf("结构体共有%v个方法\n", i)
    //3.通过值变量执行方法
    //k.Method(1).Call(nil) //传入的值无法确定
    k.MethodByName("Test").Call(nil)
    info1 := k.MethodByName("GetInfo").Call(nil) //返回类型为reflect.value的切片
    //[Name:wangchenglong,Age:18,Class:一年级]
    fmt.Println(info1)
    //4.执行方法传入参数
    var rslice []reflect.Value
    rslice = append(rslice, reflect.ValueOf("fengyu"), reflect.ValueOf(20), reflect.ValueOf("幼儿园"))
    k.MethodByName("SetInfo").Call(rslice)
    info2 := k.MethodByName("GetInfo").Call(nil)
    fmt.Println(info2)
}

//通过反射获取结构体字段
func main() {
    var stu = &Student{
        Name:  "wangchenglong",
        Age:   18,
        Class: "一年级",
    }
    printInfo(stu)
}
25.修改结构体属性值
type Student struct {
    Name  string `json:"name"`
    Age   int    `json:"age"`
    Class string `json:"class"`
}

//通过反射修改结构体属性
func printInfo(x interface{}) {
    k := reflect.ValueOf(x)
    t := reflect.TypeOf(x)
    if t.Kind() != reflect.Ptr {
        fmt.Println("传入的不是结构体指针类型")
        return
    } else if t.Elem().Kind() != reflect.Struct {
        fmt.Println("传入的不是结构体指针类型")
        return
    }
    //修改结构体属性
    name := k.Elem().FieldByName("Name")
    name.SetString("fengyu")
}

func main() {
    var stu = &Student{
        Name:  "wangchenglong",
        Age:   18,
        Class: "一年级",
    }
    printInfo(stu)
    fmt.Println(stu)
}

